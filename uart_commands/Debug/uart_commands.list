
uart_commands.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d74  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f8c  08004f8c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004fa0  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005040  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000690  2000014c  080050e0  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007dc  080050e0  000207dc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013891  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026c2  00000000  00000000  00033a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  000360d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000cd0  00000000  00000000  00036e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028584  00000000  00000000  00037b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001099f  00000000  00000000  000600dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8ccb  00000000  00000000  00070a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00169746  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003904  00000000  00000000  00169798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004f54 	.word	0x08004f54

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004f54 	.word	0x08004f54

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fcc1 	bl	8000ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f89e 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f9ba 	bl	80008c0 <MX_GPIO_Init>
  MX_ETH_Init();
 800054c:	f000 f90c 	bl	8000768 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f958 	bl	8000804 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f986 	bl	8000864 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8000558:	2210      	movs	r2, #16
 800055a:	4945      	ldr	r1, [pc, #276]	; (8000670 <main+0x134>)
 800055c:	4845      	ldr	r0, [pc, #276]	; (8000674 <main+0x138>)
 800055e:	f002 ff58 	bl	8003412 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3, rx_buffer, sizeof(rx_buffer), 100); //Echo last command at buffer
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	2210      	movs	r2, #16
 8000566:	4942      	ldr	r1, [pc, #264]	; (8000670 <main+0x134>)
 8000568:	4842      	ldr	r0, [pc, #264]	; (8000674 <main+0x138>)
 800056a:	f002 fec9 	bl	8003300 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f000 fd05 	bl	8000f80 <HAL_Delay>

	  switch(led_number)
 8000576:	4b40      	ldr	r3, [pc, #256]	; (8000678 <main+0x13c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b03      	cmp	r3, #3
 800057c:	d04c      	beq.n	8000618 <main+0xdc>
 800057e:	2b03      	cmp	r3, #3
 8000580:	dcef      	bgt.n	8000562 <main+0x26>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d002      	beq.n	800058c <main+0x50>
 8000586:	2b02      	cmp	r3, #2
 8000588:	d023      	beq.n	80005d2 <main+0x96>
 800058a:	e06f      	b.n	800066c <main+0x130>
	  {
	  case 1:
		  if((status[0] == 'O') && (status[1] == 'N') && (status[2] == 'X'))
 800058c:	4b3b      	ldr	r3, [pc, #236]	; (800067c <main+0x140>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b4f      	cmp	r3, #79	; 0x4f
 8000592:	d10c      	bne.n	80005ae <main+0x72>
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <main+0x140>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b4e      	cmp	r3, #78	; 0x4e
 800059a:	d108      	bne.n	80005ae <main+0x72>
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <main+0x140>)
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	2b58      	cmp	r3, #88	; 0x58
 80005a2:	d104      	bne.n	80005ae <main+0x72>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2101      	movs	r1, #1
 80005a8:	4835      	ldr	r0, [pc, #212]	; (8000680 <main+0x144>)
 80005aa:	f001 fbab 	bl	8001d04 <HAL_GPIO_WritePin>
		  }
		  if((status[0] == 'O') && (status[1] == 'F') && (status[2] == 'F'))
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <main+0x140>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b4f      	cmp	r3, #79	; 0x4f
 80005b4:	d155      	bne.n	8000662 <main+0x126>
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <main+0x140>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	2b46      	cmp	r3, #70	; 0x46
 80005bc:	d151      	bne.n	8000662 <main+0x126>
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <main+0x140>)
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	2b46      	cmp	r3, #70	; 0x46
 80005c4:	d14d      	bne.n	8000662 <main+0x126>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	482d      	ldr	r0, [pc, #180]	; (8000680 <main+0x144>)
 80005cc:	f001 fb9a 	bl	8001d04 <HAL_GPIO_WritePin>
		  }
		  break;
 80005d0:	e047      	b.n	8000662 <main+0x126>
	  case 2:
		  if((status[0] == 'O') && (status[1] == 'N') && (status[2] == 'X'))
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <main+0x140>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b4f      	cmp	r3, #79	; 0x4f
 80005d8:	d10c      	bne.n	80005f4 <main+0xb8>
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <main+0x140>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b4e      	cmp	r3, #78	; 0x4e
 80005e0:	d108      	bne.n	80005f4 <main+0xb8>
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <main+0x140>)
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	2b58      	cmp	r3, #88	; 0x58
 80005e8:	d104      	bne.n	80005f4 <main+0xb8>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	4824      	ldr	r0, [pc, #144]	; (8000680 <main+0x144>)
 80005f0:	f001 fb88 	bl	8001d04 <HAL_GPIO_WritePin>
		  }
		  if((status[0] == 'O') && (status[1] == 'F') && (status[2] == 'F'))
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <main+0x140>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b4f      	cmp	r3, #79	; 0x4f
 80005fa:	d134      	bne.n	8000666 <main+0x12a>
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <main+0x140>)
 80005fe:	785b      	ldrb	r3, [r3, #1]
 8000600:	2b46      	cmp	r3, #70	; 0x46
 8000602:	d130      	bne.n	8000666 <main+0x12a>
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <main+0x140>)
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	2b46      	cmp	r3, #70	; 0x46
 800060a:	d12c      	bne.n	8000666 <main+0x12a>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	481b      	ldr	r0, [pc, #108]	; (8000680 <main+0x144>)
 8000612:	f001 fb77 	bl	8001d04 <HAL_GPIO_WritePin>
		  }
		  break;
 8000616:	e026      	b.n	8000666 <main+0x12a>
	  case 3:
		  if((status[0] == 'O') && (status[1] == 'N') && (status[2] == 'X'))
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <main+0x140>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b4f      	cmp	r3, #79	; 0x4f
 800061e:	d10d      	bne.n	800063c <main+0x100>
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <main+0x140>)
 8000622:	785b      	ldrb	r3, [r3, #1]
 8000624:	2b4e      	cmp	r3, #78	; 0x4e
 8000626:	d109      	bne.n	800063c <main+0x100>
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <main+0x140>)
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b58      	cmp	r3, #88	; 0x58
 800062e:	d105      	bne.n	800063c <main+0x100>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4812      	ldr	r0, [pc, #72]	; (8000680 <main+0x144>)
 8000638:	f001 fb64 	bl	8001d04 <HAL_GPIO_WritePin>
		  }
		  if((status[0] == 'O') && (status[1] == 'F') && (status[2] == 'F'))
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <main+0x140>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b4f      	cmp	r3, #79	; 0x4f
 8000642:	d112      	bne.n	800066a <main+0x12e>
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <main+0x140>)
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	2b46      	cmp	r3, #70	; 0x46
 800064a:	d10e      	bne.n	800066a <main+0x12e>
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <main+0x140>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	2b46      	cmp	r3, #70	; 0x46
 8000652:	d10a      	bne.n	800066a <main+0x12e>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <main+0x144>)
 800065c:	f001 fb52 	bl	8001d04 <HAL_GPIO_WritePin>
		  }
		  break;
 8000660:	e003      	b.n	800066a <main+0x12e>
		  break;
 8000662:	bf00      	nop
 8000664:	e77d      	b.n	8000562 <main+0x26>
		  break;
 8000666:	bf00      	nop
 8000668:	e77b      	b.n	8000562 <main+0x26>
		  break;
 800066a:	bf00      	nop
	  HAL_UART_Transmit(&huart3, rx_buffer, sizeof(rx_buffer), 100); //Echo last command at buffer
 800066c:	e779      	b.n	8000562 <main+0x26>
 800066e:	bf00      	nop
 8000670:	200007b8 	.word	0x200007b8
 8000674:	20000250 	.word	0x20000250
 8000678:	200007c8 	.word	0x200007c8
 800067c:	200007cc 	.word	0x200007cc
 8000680:	40020400 	.word	0x40020400

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fc56 	bl	8004f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a8:	f001 fc80 	bl	8001fac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xdc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SystemClock_Config+0xdc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <SystemClock_Config+0xe0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fcad 	bl	800206c <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 f9a2 	bl	8000a60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f001 fc56 	bl	8001fcc <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f000 f99b 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2103      	movs	r1, #3
 8000746:	4618      	mov	r0, r3
 8000748:	f001 ff3e 	bl	80025c8 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000752:	f000 f985 	bl	8000a60 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ETH_Init+0x84>)
 800076e:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <MX_ETH_Init+0x88>)
 8000770:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_ETH_Init+0x8c>)
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000780:	22e1      	movs	r2, #225	; 0xe1
 8000782:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000786:	2200      	movs	r2, #0
 8000788:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_ETH_Init+0x8c>)
 800078c:	2200      	movs	r2, #0
 800078e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_ETH_Init+0x8c>)
 8000792:	2200      	movs	r2, #0
 8000794:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_ETH_Init+0x84>)
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <MX_ETH_Init+0x8c>)
 800079a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_ETH_Init+0x84>)
 800079e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_ETH_Init+0x84>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <MX_ETH_Init+0x90>)
 80007a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_ETH_Init+0x84>)
 80007ac:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_ETH_Init+0x94>)
 80007ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_ETH_Init+0x84>)
 80007b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_ETH_Init+0x84>)
 80007ba:	f000 fda9 	bl	8001310 <HAL_ETH_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f94c 	bl	8000a60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007c8:	2238      	movs	r2, #56	; 0x38
 80007ca:	2100      	movs	r1, #0
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_ETH_Init+0x98>)
 80007ce:	f004 fbb9 	bl	8004f44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_ETH_Init+0x98>)
 80007d4:	2221      	movs	r2, #33	; 0x21
 80007d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_ETH_Init+0x98>)
 80007da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_ETH_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200001a0 	.word	0x200001a0
 80007f0:	40028000 	.word	0x40028000
 80007f4:	200007d0 	.word	0x200007d0
 80007f8:	200000ac 	.word	0x200000ac
 80007fc:	2000000c 	.word	0x2000000c
 8000800:	20000168 	.word	0x20000168

08000804 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART3_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART3_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART3_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART3_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000848:	f002 fd0c 	bl	8003264 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f905 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000250 	.word	0x20000250
 8000860:	40004800 	.word	0x40004800

08000864 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800086e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2206      	movs	r2, #6
 8000874:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	2202      	movs	r2, #2
 800087a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	2202      	movs	r2, #2
 8000886:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2201      	movs	r2, #1
 800088c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2201      	movs	r2, #1
 800089e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	f001 fa45 	bl	8001d36 <HAL_PCD_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f8d5 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200002d8 	.word	0x200002d8

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a46      	ldr	r2, [pc, #280]	; (80009f4 <MX_GPIO_Init+0x134>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x134>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a3a      	ldr	r2, [pc, #232]	; (80009f4 <MX_GPIO_Init+0x134>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a34      	ldr	r2, [pc, #208]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a2e      	ldr	r2, [pc, #184]	; (80009f4 <MX_GPIO_Init+0x134>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <MX_GPIO_Init+0x134>)
 8000954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x134>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f244 0181 	movw	r1, #16513	; 0x4081
 800096c:	4822      	ldr	r0, [pc, #136]	; (80009f8 <MX_GPIO_Init+0x138>)
 800096e:	f001 f9c9 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2140      	movs	r1, #64	; 0x40
 8000976:	4821      	ldr	r0, [pc, #132]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000978:	f001 f9c4 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	481b      	ldr	r0, [pc, #108]	; (8000a00 <MX_GPIO_Init+0x140>)
 8000994:	f001 f80a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000998:	f244 0381 	movw	r3, #16513	; 0x4081
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_GPIO_Init+0x138>)
 80009b2:	f000 fffb 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0x13c>)
 80009ce:	f000 ffed 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_GPIO_Init+0x13c>)
 80009e6:	f000 ffe1 	bl	80019ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40021800 	.word	0x40021800
 8000a00:	40020800 	.word	0x40020800

08000a04 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)  // Ensure it's the correct UART instance
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_UART_RxCpltCallback+0x48>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d115      	bne.n	8000a42 <HAL_UART_RxCpltCallback+0x3e>
	  {
	      led_number = rx_buffer[5] - 48; // Extract LED number
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_RxCpltCallback+0x4c>)
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	3b30      	subs	r3, #48	; 0x30
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_UART_RxCpltCallback+0x50>)
 8000a1e:	6013      	str	r3, [r2, #0]
	      status[0] = rx_buffer[13]; // Extract status 1st character
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_UART_RxCpltCallback+0x4c>)
 8000a22:	7b5a      	ldrb	r2, [r3, #13]
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_UART_RxCpltCallback+0x54>)
 8000a26:	701a      	strb	r2, [r3, #0]
	      status[1] = rx_buffer[14]; // Extract status 2nd character
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_UART_RxCpltCallback+0x4c>)
 8000a2a:	7b9a      	ldrb	r2, [r3, #14]
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_UART_RxCpltCallback+0x54>)
 8000a2e:	705a      	strb	r2, [r3, #1]
	      status[2] = rx_buffer[15]; // Extract status 3rd character
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_UART_RxCpltCallback+0x4c>)
 8000a32:	7bda      	ldrb	r2, [r3, #15]
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_UART_RxCpltCallback+0x54>)
 8000a36:	709a      	strb	r2, [r3, #2]

	      // Restart reception for the next incoming data
	      HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8000a38:	2210      	movs	r2, #16
 8000a3a:	4905      	ldr	r1, [pc, #20]	; (8000a50 <HAL_UART_RxCpltCallback+0x4c>)
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <HAL_UART_RxCpltCallback+0x58>)
 8000a3e:	f002 fce8 	bl	8003412 <HAL_UART_Receive_IT>
	  }

  }
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004800 	.word	0x40004800
 8000a50:	200007b8 	.word	0x200007b8
 8000a54:	200007c8 	.word	0x200007c8
 8000a58:	200007cc 	.word	0x200007cc
 8000a5c:	20000250 	.word	0x20000250

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a4e      	ldr	r2, [pc, #312]	; (8000c0c <HAL_ETH_MspInit+0x158>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	f040 8096 	bne.w	8000c04 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aec:	623b      	str	r3, [r7, #32]
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a46      	ldr	r2, [pc, #280]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
 8000afc:	4b44      	ldr	r3, [pc, #272]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a3a      	ldr	r2, [pc, #232]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a34      	ldr	r2, [pc, #208]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a28      	ldr	r2, [pc, #160]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <HAL_ETH_MspInit+0x15c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b80:	2332      	movs	r3, #50	; 0x32
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b90:	230b      	movs	r3, #11
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481e      	ldr	r0, [pc, #120]	; (8000c14 <HAL_ETH_MspInit+0x160>)
 8000b9c:	f000 ff06 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ba0:	2386      	movs	r3, #134	; 0x86
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb0:	230b      	movs	r3, #11
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4817      	ldr	r0, [pc, #92]	; (8000c18 <HAL_ETH_MspInit+0x164>)
 8000bbc:	f000 fef6 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd2:	230b      	movs	r3, #11
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <HAL_ETH_MspInit+0x168>)
 8000bde:	f000 fee5 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000be2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <HAL_ETH_MspInit+0x16c>)
 8000c00:	f000 fed4 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40028000 	.word	0x40028000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40021800 	.word	0x40021800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0ae      	sub	sp, #184	; 0xb8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2290      	movs	r2, #144	; 0x90
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 f97d 	bl	8004f44 <memset>
  if(huart->Instance==USART3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_UART_MspInit+0xc4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d144      	bne.n	8000cde <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fed6 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c6e:	f7ff fef7 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_UART_MspInit+0xc8>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <HAL_UART_MspInit+0xc8>)
 8000c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_UART_MspInit+0xc8>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_MspInit+0xc8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_UART_MspInit+0xc8>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_MspInit+0xc8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <HAL_UART_MspInit+0xcc>)
 8000cca:	f000 fe6f 	bl	80019ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2027      	movs	r0, #39	; 0x27
 8000cd4:	f000 fa53 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cd8:	2027      	movs	r0, #39	; 0x27
 8000cda:	f000 fa6c 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	37b8      	adds	r7, #184	; 0xb8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ae      	sub	sp, #184	; 0xb8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2290      	movs	r2, #144	; 0x90
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 f915 	bl	8004f44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d22:	d159      	bne.n	8000dd8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fe6d 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d40:	f7ff fe8e 	bl	8000a60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d5c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d76:	230a      	movs	r3, #10
 8000d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <HAL_PCD_MspInit+0xf0>)
 8000d84:	f000 fe12 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4810      	ldr	r0, [pc, #64]	; (8000de4 <HAL_PCD_MspInit+0xf0>)
 8000da4:	f000 fe02 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dac:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db2:	6353      	str	r3, [r2, #52]	; 0x34
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6453      	str	r3, [r2, #68]	; 0x44
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_PCD_MspInit+0xec>)
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	37b8      	adds	r7, #184	; 0xb8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f884 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART3_IRQHandler+0x10>)
 8000e42:	f002 fb2b 	bl	800349c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000250 	.word	0x20000250

08000e50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e78:	f7ff ffea 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f004 f82b 	bl	8004efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fb49 	bl	800053c <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eb8:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 8000ebc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000ec0:	200007dc 	.word	0x200007dc

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>

08000ec6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f000 f94c 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f805 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed6:	f7ff fdc9 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f967 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f92f 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	200007d8 	.word	0x200007d8

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200007d8 	.word	0x200007d8

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	05fa0000 	.word	0x05fa0000

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff29 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff3e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff31 	bl	800102c <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff feb6 	bl	8000f68 <HAL_GetTick>
 80011fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d008      	beq.n	800121c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e052      	b.n	80012c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0216 	bic.w	r2, r2, #22
 800122a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800123a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <HAL_DMA_Abort+0x62>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0208 	bic.w	r2, r2, #8
 800125a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800126c:	e013      	b.n	8001296 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800126e:	f7ff fe7b 	bl	8000f68 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b05      	cmp	r3, #5
 800127a:	d90c      	bls.n	8001296 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2220      	movs	r2, #32
 8001280:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2203      	movs	r2, #3
 8001286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e015      	b.n	80012c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e4      	bne.n	800126e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	223f      	movs	r2, #63	; 0x3f
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d004      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e00c      	b.n	8001302 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2205      	movs	r2, #5
 80012ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e086      	b.n	8001430 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2223      	movs	r2, #35	; 0x23
 8001330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fbbd 	bl	8000ab4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <HAL_ETH_Init+0x128>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <HAL_ETH_Init+0x128>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b3c      	ldr	r3, [pc, #240]	; (8001438 <HAL_ETH_Init+0x128>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_ETH_Init+0x12c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a39      	ldr	r2, [pc, #228]	; (800143c <HAL_ETH_Init+0x12c>)
 8001358:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800135c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <HAL_ETH_Init+0x12c>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_ETH_Init+0x12c>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <HAL_ETH_Init+0x12c>)
 800136e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff fdee 	bl	8000f68 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800138e:	e011      	b.n	80013b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001390:	f7ff fdea 	bl	8000f68 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800139e:	d909      	bls.n	80013b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2204      	movs	r2, #4
 80013a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	22e0      	movs	r2, #224	; 0xe0
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e03d      	b.n	8001430 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1e4      	bne.n	8001390 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f97a 	bl	80016c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fa25 	bl	800181c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fa7b 	bl	80018ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	461a      	mov	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f9e3 	bl	80017ac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80013f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_ETH_Init+0x130>)
 8001404:	430b      	orrs	r3, r1
 8001406:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800141a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2210      	movs	r2, #16
 800142a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	00020060 	.word	0x00020060

08001444 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <ETH_SetMACConfig+0x164>)
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	7b9b      	ldrb	r3, [r3, #14]
 8001462:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	7c12      	ldrb	r2, [r2, #16]
 8001468:	2a00      	cmp	r2, #0
 800146a:	d102      	bne.n	8001472 <ETH_SetMACConfig+0x2e>
 800146c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001470:	e000      	b.n	8001474 <ETH_SetMACConfig+0x30>
 8001472:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001474:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	7c52      	ldrb	r2, [r2, #17]
 800147a:	2a00      	cmp	r2, #0
 800147c:	d102      	bne.n	8001484 <ETH_SetMACConfig+0x40>
 800147e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001482:	e000      	b.n	8001486 <ETH_SetMACConfig+0x42>
 8001484:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001486:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800148c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	7fdb      	ldrb	r3, [r3, #31]
 8001492:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001494:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800149a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	7f92      	ldrb	r2, [r2, #30]
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d102      	bne.n	80014aa <ETH_SetMACConfig+0x66>
 80014a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a8:	e000      	b.n	80014ac <ETH_SetMACConfig+0x68>
 80014aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80014ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	7f1b      	ldrb	r3, [r3, #28]
 80014b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d102      	bne.n	80014d4 <ETH_SetMACConfig+0x90>
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	e000      	b.n	80014d6 <ETH_SetMACConfig+0x92>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	7bdb      	ldrb	r3, [r3, #15]
 80014dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014ee:	4313      	orrs	r3, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fd3a 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001532:	2a00      	cmp	r2, #0
 8001534:	d101      	bne.n	800153a <ETH_SetMACConfig+0xf6>
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	e000      	b.n	800153c <ETH_SetMACConfig+0xf8>
 800153a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800153c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001542:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800154a:	2a01      	cmp	r2, #1
 800154c:	d101      	bne.n	8001552 <ETH_SetMACConfig+0x10e>
 800154e:	2208      	movs	r2, #8
 8001550:	e000      	b.n	8001554 <ETH_SetMACConfig+0x110>
 8001552:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001554:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800155c:	2a01      	cmp	r2, #1
 800155e:	d101      	bne.n	8001564 <ETH_SetMACConfig+0x120>
 8001560:	2204      	movs	r2, #4
 8001562:	e000      	b.n	8001566 <ETH_SetMACConfig+0x122>
 8001564:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001566:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800156e:	2a01      	cmp	r2, #1
 8001570:	d101      	bne.n	8001576 <ETH_SetMACConfig+0x132>
 8001572:	2202      	movs	r2, #2
 8001574:	e000      	b.n	8001578 <ETH_SetMACConfig+0x134>
 8001576:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001578:	4313      	orrs	r3, r2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff fcf5 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	fd20810f 	.word	0xfd20810f

080015ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <ETH_SetDMAConfig+0x110>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	7b1b      	ldrb	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <ETH_SetDMAConfig+0x2c>
 80015d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015d6:	e000      	b.n	80015da <ETH_SetDMAConfig+0x2e>
 80015d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	7f52      	ldrb	r2, [r2, #29]
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d102      	bne.n	80015f0 <ETH_SetDMAConfig+0x44>
 80015ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015ee:	e000      	b.n	80015f2 <ETH_SetDMAConfig+0x46>
 80015f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7b9b      	ldrb	r3, [r3, #14]
 80015f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001600:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	7f1b      	ldrb	r3, [r3, #28]
 8001606:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001608:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7f9b      	ldrb	r3, [r3, #30]
 800160e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001610:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001616:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800161e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001620:	4313      	orrs	r3, r2
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff fc9c 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	461a      	mov	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001660:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001666:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800166c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001674:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001676:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800167e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001684:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800168e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001692:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fc6d 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	f8de3f23 	.word	0xf8de3f23

080016c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0a6      	sub	sp, #152	; 0x98
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001702:	2300      	movs	r3, #0
 8001704:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800170c:	2300      	movs	r3, #0
 800170e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001728:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800172e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800173a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800173e:	4619      	mov	r1, r3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fe7f 	bl	8001444 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001754:	2301      	movs	r3, #1
 8001756:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001772:	2301      	movs	r3, #1
 8001774:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800177c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001780:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff05 	bl	80015ac <ETH_SetDMAConfig>
}
 80017a2:	bf00      	nop
 80017a4:	3798      	adds	r7, #152	; 0x98
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3305      	adds	r3, #5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	3204      	adds	r2, #4
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <ETH_MACAddressConfig+0x68>)
 80017ce:	4413      	add	r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3303      	adds	r3, #3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	061a      	lsls	r2, r3, #24
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3302      	adds	r3, #2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	4313      	orrs	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <ETH_MACAddressConfig+0x6c>)
 80017fe:	4413      	add	r3, r2
 8001800:	461a      	mov	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40028040 	.word	0x40028040
 8001818:	40028044 	.word	0x40028044

0800181c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e03e      	b.n	80018a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68d9      	ldr	r1, [r3, #12]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	3206      	adds	r2, #6
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d80c      	bhi.n	800188c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68d9      	ldr	r1, [r3, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	e004      	b.n	8001896 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d9bd      	bls.n	800182a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c0:	611a      	str	r2, [r3, #16]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e048      	b.n	800196e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6919      	ldr	r1, [r3, #16]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001918:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	3212      	adds	r2, #18
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d80c      	bhi.n	800195e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6919      	ldr	r1, [r3, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	461a      	mov	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	e004      	b.n	8001968 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d9b3      	bls.n	80018dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199e:	60da      	str	r2, [r3, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e175      	b.n	8001cb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8164 	bne.w	8001cb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x56>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80be 	beq.w	8001cb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b4e:	4a61      	ldr	r2, [pc, #388]	; (8001cd4 <HAL_GPIO_Init+0x328>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_GPIO_Init+0x32c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d037      	beq.n	8001bea <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a57      	ldr	r2, [pc, #348]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d031      	beq.n	8001be6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a56      	ldr	r2, [pc, #344]	; (8001ce0 <HAL_GPIO_Init+0x334>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a55      	ldr	r2, [pc, #340]	; (8001ce4 <HAL_GPIO_Init+0x338>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HAL_GPIO_Init+0x33c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a53      	ldr	r2, [pc, #332]	; (8001cec <HAL_GPIO_Init+0x340>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_GPIO_Init+0x344>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x226>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <HAL_GPIO_Init+0x348>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x222>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a50      	ldr	r2, [pc, #320]	; (8001cf8 <HAL_GPIO_Init+0x34c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x21e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4f      	ldr	r2, [pc, #316]	; (8001cfc <HAL_GPIO_Init+0x350>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001bc2:	2309      	movs	r3, #9
 8001bc4:	e012      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	e010      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bca:	2308      	movs	r3, #8
 8001bcc:	e00e      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bfc:	4935      	ldr	r1, [pc, #212]	; (8001cd4 <HAL_GPIO_Init+0x328>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2e:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_GPIO_Init+0x354>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f ae86 	bls.w	80019cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40021c00 	.word	0x40021c00
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40022400 	.word	0x40022400
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af02      	add	r7, sp, #8
 8001d3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e108      	b.n	8001f5a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe ffc6 	bl	8000cf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d76:	d102      	bne.n	8001d7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fe24 	bl	80049d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7c1a      	ldrb	r2, [r3, #16]
 8001d90:	f88d 2000 	strb.w	r2, [sp]
 8001d94:	3304      	adds	r3, #4
 8001d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d98:	f002 fdc0 	bl	800491c <USB_CoreInit>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0d5      	b.n	8001f5a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 fe1c 	bl	80049f2 <USB_SetCurrentMode>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0c6      	b.n	8001f5a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e04a      	b.n	8001e68 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3315      	adds	r3, #21
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3314      	adds	r3, #20
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	b298      	uxth	r0, r3
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	332e      	adds	r3, #46	; 0x2e
 8001e0e:	4602      	mov	r2, r0
 8001e10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	3318      	adds	r3, #24
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	331c      	adds	r3, #28
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3320      	adds	r3, #32
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3324      	adds	r3, #36	; 0x24
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3301      	adds	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	791b      	ldrb	r3, [r3, #4]
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3af      	bcc.n	8001dd2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e044      	b.n	8001f02 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	3301      	adds	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	791b      	ldrb	r3, [r3, #4]
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d3b5      	bcc.n	8001e78 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7c1a      	ldrb	r2, [r3, #16]
 8001f14:	f88d 2000 	strb.w	r2, [sp]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1c:	f002 fdb6 	bl	8004a8c <USB_DevInit>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e013      	b.n	8001f5a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7b1b      	ldrb	r3, [r3, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f80b 	bl	8001f64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 ff71 	bl	8004e3a <USB_DevDisconnect>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	10000003 	.word	0x10000003

08001fac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40007000 	.word	0x40007000

08001fcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffa:	f7fe ffb5 	bl	8000f68 <HAL_GetTick>
 8001ffe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002000:	e009      	b.n	8002016 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002002:	f7fe ffb1 	bl	8000f68 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002010:	d901      	bls.n	8002016 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e022      	b.n	800205c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002022:	d1ee      	bne.n	8002002 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800202a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002030:	f7fe ff9a 	bl	8000f68 <HAL_GetTick>
 8002034:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002036:	e009      	b.n	800204c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002038:	f7fe ff96 	bl	8000f68 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002046:	d901      	bls.n	800204c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e007      	b.n	800205c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002058:	d1ee      	bne.n	8002038 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	40007000 	.word	0x40007000

0800206c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e29b      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002090:	4b96      	ldr	r3, [pc, #600]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d00c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209c:	4b93      	ldr	r3, [pc, #588]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d112      	bne.n	80020ce <HAL_RCC_OscConfig+0x62>
 80020a8:	4b90      	ldr	r3, [pc, #576]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06c      	beq.n	800219c <HAL_RCC_OscConfig+0x130>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d168      	bne.n	800219c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e275      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x7a>
 80020d8:	4b84      	ldr	r3, [pc, #528]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a83      	ldr	r2, [pc, #524]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0xd8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x9c>
 80020ee:	4b7f      	ldr	r3, [pc, #508]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7e      	ldr	r2, [pc, #504]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b7c      	ldr	r3, [pc, #496]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7b      	ldr	r2, [pc, #492]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xd8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xc0>
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a75      	ldr	r2, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a72      	ldr	r2, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xd8>
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6e      	ldr	r2, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6b      	ldr	r2, [pc, #428]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe ff0c 	bl	8000f68 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7fe ff08 	bl	8000f68 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e229      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xe8>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fef8 	bl	8000f68 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7fe fef4 	bl	8000f68 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e215      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	4b57      	ldr	r3, [pc, #348]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x110>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d069      	beq.n	800227e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021aa:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d11c      	bne.n	80021fc <HAL_RCC_OscConfig+0x190>
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x17a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1e9      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	493d      	ldr	r1, [pc, #244]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	e040      	b.n	800227e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a38      	ldr	r2, [pc, #224]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe feaa 	bl	8000f68 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002218:	f7fe fea6 	bl	8000f68 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1c7      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4929      	ldr	r1, [pc, #164]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
 800224a:	e018      	b.n	800227e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a26      	ldr	r2, [pc, #152]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fe86 	bl	8000f68 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe fe82 	bl	8000f68 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1a3      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d038      	beq.n	80022fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7fe fe63 	bl	8000f68 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a6:	f7fe fe5f 	bl	8000f68 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e180      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80022ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x23a>
 80022c4:	e01a      	b.n	80022fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_RCC_OscConfig+0x280>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7fe fe49 	bl	8000f68 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe fe45 	bl	8000f68 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d903      	bls.n	80022f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e166      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
 80022ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	4b92      	ldr	r3, [pc, #584]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a4 	beq.w	8002452 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b8c      	ldr	r3, [pc, #560]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b89      	ldr	r3, [pc, #548]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a88      	ldr	r2, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b86      	ldr	r3, [pc, #536]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002332:	4b83      	ldr	r3, [pc, #524]	; (8002540 <HAL_RCC_OscConfig+0x4d4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800233e:	4b80      	ldr	r3, [pc, #512]	; (8002540 <HAL_RCC_OscConfig+0x4d4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7f      	ldr	r2, [pc, #508]	; (8002540 <HAL_RCC_OscConfig+0x4d4>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234a:	f7fe fe0d 	bl	8000f68 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7fe fe09 	bl	8000f68 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e12a      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002364:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0x4d4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x31a>
 8002378:	4b70      	ldr	r3, [pc, #448]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a6f      	ldr	r2, [pc, #444]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	e02d      	b.n	80023e2 <HAL_RCC_OscConfig+0x376>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x33c>
 800238e:	4b6b      	ldr	r3, [pc, #428]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a6a      	ldr	r2, [pc, #424]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	4b68      	ldr	r3, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a67      	ldr	r2, [pc, #412]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
 80023a6:	e01c      	b.n	80023e2 <HAL_RCC_OscConfig+0x376>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d10c      	bne.n	80023ca <HAL_RCC_OscConfig+0x35e>
 80023b0:	4b62      	ldr	r3, [pc, #392]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a61      	ldr	r2, [pc, #388]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	4b5f      	ldr	r3, [pc, #380]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a5e      	ldr	r2, [pc, #376]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e00b      	b.n	80023e2 <HAL_RCC_OscConfig+0x376>
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a5b      	ldr	r2, [pc, #364]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
 80023d6:	4b59      	ldr	r3, [pc, #356]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a58      	ldr	r2, [pc, #352]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d015      	beq.n	8002416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fdbd 	bl	8000f68 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fdb9 	bl	8000f68 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0d8      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RCC_OscConfig+0x386>
 8002414:	e014      	b.n	8002440 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7fe fda7 	bl	8000f68 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fda3 	bl	8000f68 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0c2      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ee      	bne.n	800241e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d105      	bne.n	8002452 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a3c      	ldr	r2, [pc, #240]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80ae 	beq.w	80025b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245c:	4b37      	ldr	r3, [pc, #220]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d06d      	beq.n	8002544 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d14b      	bne.n	8002508 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fd74 	bl	8000f68 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe fd70 	bl	8000f68 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e091      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	071b      	lsls	r3, r3, #28
 80024ce:	491b      	ldr	r1, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a18      	ldr	r2, [pc, #96]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd42 	bl	8000f68 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fd3e 	bl	8000f68 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e05f      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x47c>
 8002506:	e057      	b.n	80025b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0b      	ldr	r2, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 800250e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fd28 	bl	8000f68 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe fd24 	bl	8000f68 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e045      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_OscConfig+0x4d0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x4b0>
 800253a:	e03d      	b.n	80025b8 <HAL_RCC_OscConfig+0x54c>
 800253c:	40023800 	.word	0x40023800
 8002540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_RCC_OscConfig+0x558>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d030      	beq.n	80025b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d129      	bne.n	80025b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d122      	bne.n	80025b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800257a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800257c:	4293      	cmp	r3, r2
 800257e:	d119      	bne.n	80025b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d10f      	bne.n	80025b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0d0      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 020f 	bic.w	r2, r3, #15
 80025f6:	4965      	ldr	r1, [pc, #404]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800264a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d040      	beq.n	80026ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d115      	bne.n	80026aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e073      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06b      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026bc:	f7fe fc54 	bl	8000f68 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fe fc50 	bl	8000f68 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e053      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d210      	bcs.n	800271c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 020f 	bic.w	r2, r3, #15
 8002702:	4922      	ldr	r1, [pc, #136]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e032      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4916      	ldr	r1, [pc, #88]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275a:	f000 f821 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800275e:	4602      	mov	r2, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1cc>)
 800276c:	5ccb      	ldrb	r3, [r1, r3]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1d0>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1d4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fbb0 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023c00 	.word	0x40023c00
 8002790:	40023800 	.word	0x40023800
 8002794:	08004f6c 	.word	0x08004f6c
 8002798:	20000000 	.word	0x20000000
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a4:	b094      	sub	sp, #80	; 0x50
 80027a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	647b      	str	r3, [r7, #68]	; 0x44
 80027ac:	2300      	movs	r3, #0
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b0:	2300      	movs	r3, #0
 80027b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b8:	4b79      	ldr	r3, [pc, #484]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d00d      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x40>
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	f200 80e1 	bhi.w	800298c <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x3a>
 80027d2:	e0db      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d8:	e0db      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027da:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80027dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027de:	e0d8      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e0:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027ea:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d063      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f6:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	2200      	movs	r2, #0
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002800:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
 800280e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	0159      	lsls	r1, r3, #5
 8002820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002824:	0150      	lsls	r0, r2, #5
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4621      	mov	r1, r4
 800282c:	1a51      	subs	r1, r2, r1
 800282e:	6139      	str	r1, [r7, #16]
 8002830:	4629      	mov	r1, r5
 8002832:	eb63 0301 	sbc.w	r3, r3, r1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002844:	4659      	mov	r1, fp
 8002846:	018b      	lsls	r3, r1, #6
 8002848:	4651      	mov	r1, sl
 800284a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284e:	4651      	mov	r1, sl
 8002850:	018a      	lsls	r2, r1, #6
 8002852:	4651      	mov	r1, sl
 8002854:	ebb2 0801 	subs.w	r8, r2, r1
 8002858:	4659      	mov	r1, fp
 800285a:	eb63 0901 	sbc.w	r9, r3, r1
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800286a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800286e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002872:	4690      	mov	r8, r2
 8002874:	4699      	mov	r9, r3
 8002876:	4623      	mov	r3, r4
 8002878:	eb18 0303 	adds.w	r3, r8, r3
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	462b      	mov	r3, r5
 8002880:	eb49 0303 	adc.w	r3, r9, r3
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002892:	4629      	mov	r1, r5
 8002894:	024b      	lsls	r3, r1, #9
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800289c:	4621      	mov	r1, r4
 800289e:	024a      	lsls	r2, r1, #9
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a6:	2200      	movs	r2, #0
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b0:	f7fd fcc2 	bl	8000238 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	e058      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	2200      	movs	r2, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	4611      	mov	r1, r2
 80028ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ce:	623b      	str	r3, [r7, #32]
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028d8:	4642      	mov	r2, r8
 80028da:	464b      	mov	r3, r9
 80028dc:	f04f 0000 	mov.w	r0, #0
 80028e0:	f04f 0100 	mov.w	r1, #0
 80028e4:	0159      	lsls	r1, r3, #5
 80028e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ea:	0150      	lsls	r0, r2, #5
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4641      	mov	r1, r8
 80028f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80028f6:	4649      	mov	r1, r9
 80028f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800290c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002910:	ebb2 040a 	subs.w	r4, r2, sl
 8002914:	eb63 050b 	sbc.w	r5, r3, fp
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	00eb      	lsls	r3, r5, #3
 8002922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002926:	00e2      	lsls	r2, r4, #3
 8002928:	4614      	mov	r4, r2
 800292a:	461d      	mov	r5, r3
 800292c:	4643      	mov	r3, r8
 800292e:	18e3      	adds	r3, r4, r3
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	464b      	mov	r3, r9
 8002934:	eb45 0303 	adc.w	r3, r5, r3
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002946:	4629      	mov	r1, r5
 8002948:	028b      	lsls	r3, r1, #10
 800294a:	4621      	mov	r1, r4
 800294c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002950:	4621      	mov	r1, r4
 8002952:	028a      	lsls	r2, r1, #10
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295a:	2200      	movs	r2, #0
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	61fa      	str	r2, [r7, #28]
 8002960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002964:	f7fd fc68 	bl	8000238 <__aeabi_uldivmod>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4613      	mov	r3, r2
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	3301      	adds	r3, #1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800298e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002994:	4618      	mov	r0, r3
 8002996:	3750      	adds	r7, #80	; 0x50
 8002998:	46bd      	mov	sp, r7
 800299a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	007a1200 	.word	0x007a1200

080029ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c8:	f7ff fff0 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0a9b      	lsrs	r3, r3, #10
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08004f7c 	.word	0x08004f7c

080029ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f0:	f7ff ffdc 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	0b5b      	lsrs	r3, r3, #13
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4903      	ldr	r1, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08004f7c 	.word	0x08004f7c

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d012      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a3c:	4b69      	ldr	r3, [pc, #420]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a68      	ldr	r2, [pc, #416]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a46:	6093      	str	r3, [r2, #8]
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a50:	4964      	ldr	r1, [pc, #400]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	4959      	ldr	r1, [pc, #356]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d017      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	494a      	ldr	r1, [pc, #296]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac8:	d101      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 808b 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002af8:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a39      	ldr	r2, [pc, #228]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	; 0x40
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fa24 	bl	8000f68 <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b24:	f7fe fa20 	bl	8000f68 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e38f      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d035      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d02e      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b82:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d114      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe f9e8 	bl	8000f68 <HAL_GetTick>
 8002b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe f9e4 	bl	8000f68 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e351      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bda:	400b      	ands	r3, r1
 8002bdc:	4901      	ldr	r1, [pc, #4]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
 8002be2:	e00b      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40007000 	.word	0x40007000
 8002bec:	0ffffcff 	.word	0x0ffffcff
 8002bf0:	4bac      	ldr	r3, [pc, #688]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4aab      	ldr	r2, [pc, #684]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bfa:	6093      	str	r3, [r2, #8]
 8002bfc:	4ba9      	ldr	r3, [pc, #676]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c08:	49a6      	ldr	r1, [pc, #664]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d010      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c1a:	4ba2      	ldr	r3, [pc, #648]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c20:	4aa0      	ldr	r2, [pc, #640]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c2a:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	499b      	ldr	r1, [pc, #620]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c48:	4b96      	ldr	r3, [pc, #600]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c56:	4993      	ldr	r1, [pc, #588]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c6a:	4b8e      	ldr	r3, [pc, #568]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c78:	498a      	ldr	r1, [pc, #552]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c8c:	4b85      	ldr	r3, [pc, #532]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9a:	4982      	ldr	r1, [pc, #520]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cae:	4b7d      	ldr	r3, [pc, #500]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4979      	ldr	r1, [pc, #484]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd0:	4b74      	ldr	r3, [pc, #464]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4971      	ldr	r1, [pc, #452]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cf2:	4b6c      	ldr	r3, [pc, #432]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f023 020c 	bic.w	r2, r3, #12
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d00:	4968      	ldr	r1, [pc, #416]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d14:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	4960      	ldr	r1, [pc, #384]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d36:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d44:	4957      	ldr	r1, [pc, #348]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d58:	4b52      	ldr	r3, [pc, #328]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	494f      	ldr	r1, [pc, #316]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	4946      	ldr	r1, [pc, #280]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d9c:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	493e      	ldr	r1, [pc, #248]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	4935      	ldr	r1, [pc, #212]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002de0:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dee:	492d      	ldr	r1, [pc, #180]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d011      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e10:	4924      	ldr	r1, [pc, #144]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e20:	d101      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e22:	2301      	movs	r3, #1
 8002e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e32:	2301      	movs	r3, #1
 8002e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	4914      	ldr	r1, [pc, #80]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00b      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e74:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00f      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e98:	4902      	ldr	r1, [pc, #8]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eb4:	4b8a      	ldr	r3, [pc, #552]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	4986      	ldr	r1, [pc, #536]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ed8:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ede:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee8:	497d      	ldr	r1, [pc, #500]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d006      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80d6 	beq.w	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a75      	ldr	r2, [pc, #468]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe f82a 	bl	8000f68 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f18:	f7fe f826 	bl	8000f68 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e195      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d021      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11d      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5e:	0e1b      	lsrs	r3, r3, #24
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	019a      	lsls	r2, r3, #6
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	071b      	lsls	r3, r3, #28
 8002f7e:	4958      	ldr	r1, [pc, #352]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02e      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb0:	d129      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fc0:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc6:	0f1b      	lsrs	r3, r3, #28
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	019a      	lsls	r2, r3, #6
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	493e      	ldr	r1, [pc, #248]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fee:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff4:	f023 021f 	bic.w	r2, r3, #31
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	4938      	ldr	r1, [pc, #224]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01d      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003012:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003018:	0e1b      	lsrs	r3, r3, #24
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003020:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	0f1b      	lsrs	r3, r3, #28
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	019a      	lsls	r2, r3, #6
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	431a      	orrs	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	061b      	lsls	r3, r3, #24
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	071b      	lsls	r3, r3, #28
 8003046:	4926      	ldr	r1, [pc, #152]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d011      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	019a      	lsls	r2, r3, #6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	071b      	lsls	r3, r3, #28
 8003076:	491a      	ldr	r1, [pc, #104]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308a:	f7fd ff6d 	bl	8000f68 <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003092:	f7fd ff69 	bl	8000f68 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	; 0x64
 800309e:	d901      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0d8      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	f040 80ce 	bne.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c4:	f7fd ff50 	bl	8000f68 <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ca:	e00b      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030cc:	f7fd ff4c 	bl	8000f68 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d904      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0bb      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030e4:	4b5e      	ldr	r3, [pc, #376]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f0:	d0ec      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02e      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d12a      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800311a:	4b51      	ldr	r3, [pc, #324]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003128:	4b4d      	ldr	r3, [pc, #308]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	0f1b      	lsrs	r3, r3, #28
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	019a      	lsls	r2, r3, #6
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	071b      	lsls	r3, r3, #28
 800314e:	4944      	ldr	r1, [pc, #272]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003156:	4b42      	ldr	r3, [pc, #264]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	493d      	ldr	r1, [pc, #244]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d022      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003184:	d11d      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003186:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	0e1b      	lsrs	r3, r3, #24
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	0f1b      	lsrs	r3, r3, #28
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	019a      	lsls	r2, r3, #6
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	4929      	ldr	r1, [pc, #164]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d028      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031dc:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	431a      	orrs	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4917      	ldr	r1, [pc, #92]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	4911      	ldr	r1, [pc, #68]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fd fe9c 	bl	8000f68 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003234:	f7fd fe98 	bl	8000f68 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e007      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800324e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003252:	d1ef      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800

08003264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e040      	b.n	80032f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fccc 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fe6c 	bl	8003f88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fc05 	bl	8003ac0 <UART_SetConfig>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e01b      	b.n	80032f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 feeb 	bl	80040cc <UART_CheckIdleState>
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003314:	2b20      	cmp	r3, #32
 8003316:	d177      	bne.n	8003408 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Transmit+0x24>
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e070      	b.n	800340a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2221      	movs	r2, #33	; 0x21
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003336:	f7fd fe17 	bl	8000f68 <HAL_GetTick>
 800333a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	d108      	bne.n	8003368 <HAL_UART_Transmit+0x68>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	e003      	b.n	8003370 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003370:	e02f      	b.n	80033d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 ff4d 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e03b      	b.n	800340a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	3302      	adds	r3, #2
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e007      	b.n	80033c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1c9      	bne.n	8003372 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2140      	movs	r1, #64	; 0x40
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 ff17 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e005      	b.n	800340a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08a      	sub	sp, #40	; 0x28
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003426:	2b20      	cmp	r3, #32
 8003428:	d132      	bne.n	8003490 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_UART_Receive_IT+0x24>
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e02b      	b.n	8003492 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d018      	beq.n	8003480 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	613b      	str	r3, [r7, #16]
   return(result);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	69f9      	ldr	r1, [r7, #28]
 8003472:	6a3a      	ldr	r2, [r7, #32]
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	61bb      	str	r3, [r7, #24]
   return(result);
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e6      	bne.n	800344e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	461a      	mov	r2, r3
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 ff36 	bl	80042f8 <UART_Start_Receive_IT>
 800348c:	4603      	mov	r3, r0
 800348e:	e000      	b.n	8003492 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3728      	adds	r7, #40	; 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b0ba      	sub	sp, #232	; 0xe8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80034c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80034ca:	4013      	ands	r3, r2
 80034cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80034d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d115      	bne.n	8003504 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00f      	beq.n	8003504 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 82ac 	beq.w	8003a52 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
      }
      return;
 8003502:	e2a6      	b.n	8003a52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8117 	beq.w	800373c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800350e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800351a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_UART_IRQHandler+0x298>)
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 810a 	beq.w	800373c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d011      	beq.n	8003558 <HAL_UART_IRQHandler+0xbc>
 8003534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354e:	f043 0201 	orr.w	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d011      	beq.n	8003588 <HAL_UART_IRQHandler+0xec>
 8003564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2202      	movs	r2, #2
 8003576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	f043 0204 	orr.w	r2, r3, #4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d011      	beq.n	80035b8 <HAL_UART_IRQHandler+0x11c>
 8003594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2204      	movs	r2, #4
 80035a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ae:	f043 0202 	orr.w	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d017      	beq.n	80035f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2208      	movs	r2, #8
 80035e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ea:	f043 0208 	orr.w	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <HAL_UART_IRQHandler+0x18a>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8212 	beq.w	8003a56 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800363e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d005      	beq.n	800367e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003676:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800367a:	2b00      	cmp	r3, #0
 800367c:	d04f      	beq.n	800371e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 ff00 	bl	8004484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d141      	bne.n	8003716 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3308      	adds	r3, #8
 8003698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3308      	adds	r3, #8
 80036ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1d9      	bne.n	8003692 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d013      	beq.n	800370e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <HAL_UART_IRQHandler+0x29c>)
 80036ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fde9 	bl	80012ca <HAL_DMA_Abort_IT>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d017      	beq.n	800372e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003708:	4610      	mov	r0, r2
 800370a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	e00f      	b.n	800372e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f9b6 	bl	8003a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003714:	e00b      	b.n	800372e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f9b2 	bl	8003a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	e007      	b.n	800372e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f9ae 	bl	8003a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800372c:	e193      	b.n	8003a56 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372e:	bf00      	nop
    return;
 8003730:	e191      	b.n	8003a56 <HAL_UART_IRQHandler+0x5ba>
 8003732:	bf00      	nop
 8003734:	04000120 	.word	0x04000120
 8003738:	0800454d 	.word	0x0800454d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 814c 	bne.w	80039de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8145 	beq.w	80039de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 813e 	beq.w	80039de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2210      	movs	r2, #16
 8003768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	f040 80b6 	bne.w	80038e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003786:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8165 	beq.w	8003a5a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800379a:	429a      	cmp	r2, r3
 800379c:	f080 815d 	bcs.w	8003a5a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b4:	f000 8086 	beq.w	80038c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1da      	bne.n	80037b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3308      	adds	r3, #8
 8003808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3308      	adds	r3, #8
 8003822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003826:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800382a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800382e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e1      	bne.n	8003802 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800384e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3308      	adds	r3, #8
 800385e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e3      	bne.n	800383e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003894:	f023 0310 	bic.w	r3, r3, #16
 8003898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80038a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e4      	bne.n	8003884 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fc93 	bl	80011ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	b29b      	uxth	r3, r3
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8d8 	bl	8003a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038e4:	e0b9      	b.n	8003a5a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80ab 	beq.w	8003a5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a6 	beq.w	8003a5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
 8003936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800393a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e4      	bne.n	8003912 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	623b      	str	r3, [r7, #32]
   return(result);
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800396c:	633a      	str	r2, [r7, #48]	; 0x30
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e3      	bne.n	8003948 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f023 0310 	bic.w	r3, r3, #16
 80039a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	617b      	str	r3, [r7, #20]
   return(result);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e4      	bne.n	8003994 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f85c 	bl	8003a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039dc:	e03f      	b.n	8003a5e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00e      	beq.n	8003a08 <HAL_UART_IRQHandler+0x56c>
 80039ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f853 	bl	8003aac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a06:	e02d      	b.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01c      	beq.n	8003a62 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
    }
    return;
 8003a30:	e017      	b.n	8003a62 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d012      	beq.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
 8003a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fd94 	bl	8004578 <UART_EndTransmit_IT>
    return;
 8003a50:	e008      	b.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a52:	bf00      	nop
 8003a54:	e006      	b.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a56:	bf00      	nop
 8003a58:	e004      	b.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a62:	bf00      	nop
  }

}
 8003a64:	37e8      	adds	r7, #232	; 0xe8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop

08003a6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4ba6      	ldr	r3, [pc, #664]	; (8003d84 <UART_SetConfig+0x2c4>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	6979      	ldr	r1, [r7, #20]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a94      	ldr	r2, [pc, #592]	; (8003d88 <UART_SetConfig+0x2c8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d120      	bne.n	8003b7e <UART_SetConfig+0xbe>
 8003b3c:	4b93      	ldr	r3, [pc, #588]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d816      	bhi.n	8003b78 <UART_SetConfig+0xb8>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x90>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b67 	.word	0x08003b67
 8003b5c:	08003b73 	.word	0x08003b73
 8003b60:	2301      	movs	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e150      	b.n	8003e08 <UART_SetConfig+0x348>
 8003b66:	2302      	movs	r3, #2
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e14d      	b.n	8003e08 <UART_SetConfig+0x348>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e14a      	b.n	8003e08 <UART_SetConfig+0x348>
 8003b72:	2308      	movs	r3, #8
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e147      	b.n	8003e08 <UART_SetConfig+0x348>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e144      	b.n	8003e08 <UART_SetConfig+0x348>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a83      	ldr	r2, [pc, #524]	; (8003d90 <UART_SetConfig+0x2d0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d132      	bne.n	8003bee <UART_SetConfig+0x12e>
 8003b88:	4b80      	ldr	r3, [pc, #512]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d828      	bhi.n	8003be8 <UART_SetConfig+0x128>
 8003b96:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <UART_SetConfig+0xdc>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003bdd 	.word	0x08003bdd
 8003bb0:	08003be9 	.word	0x08003be9
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003bd7 	.word	0x08003bd7
 8003bc0:	08003be9 	.word	0x08003be9
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003be9 	.word	0x08003be9
 8003bcc:	08003be3 	.word	0x08003be3
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e118      	b.n	8003e08 <UART_SetConfig+0x348>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e115      	b.n	8003e08 <UART_SetConfig+0x348>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e112      	b.n	8003e08 <UART_SetConfig+0x348>
 8003be2:	2308      	movs	r3, #8
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e10f      	b.n	8003e08 <UART_SetConfig+0x348>
 8003be8:	2310      	movs	r3, #16
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e10c      	b.n	8003e08 <UART_SetConfig+0x348>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a68      	ldr	r2, [pc, #416]	; (8003d94 <UART_SetConfig+0x2d4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d120      	bne.n	8003c3a <UART_SetConfig+0x17a>
 8003bf8:	4b64      	ldr	r3, [pc, #400]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c02:	2b30      	cmp	r3, #48	; 0x30
 8003c04:	d013      	beq.n	8003c2e <UART_SetConfig+0x16e>
 8003c06:	2b30      	cmp	r3, #48	; 0x30
 8003c08:	d814      	bhi.n	8003c34 <UART_SetConfig+0x174>
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d009      	beq.n	8003c22 <UART_SetConfig+0x162>
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d810      	bhi.n	8003c34 <UART_SetConfig+0x174>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <UART_SetConfig+0x15c>
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d006      	beq.n	8003c28 <UART_SetConfig+0x168>
 8003c1a:	e00b      	b.n	8003c34 <UART_SetConfig+0x174>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e0f2      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c22:	2302      	movs	r3, #2
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e0ef      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e0ec      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e0e9      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c34:	2310      	movs	r3, #16
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0e6      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a56      	ldr	r2, [pc, #344]	; (8003d98 <UART_SetConfig+0x2d8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d120      	bne.n	8003c86 <UART_SetConfig+0x1c6>
 8003c44:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c50:	d013      	beq.n	8003c7a <UART_SetConfig+0x1ba>
 8003c52:	2bc0      	cmp	r3, #192	; 0xc0
 8003c54:	d814      	bhi.n	8003c80 <UART_SetConfig+0x1c0>
 8003c56:	2b80      	cmp	r3, #128	; 0x80
 8003c58:	d009      	beq.n	8003c6e <UART_SetConfig+0x1ae>
 8003c5a:	2b80      	cmp	r3, #128	; 0x80
 8003c5c:	d810      	bhi.n	8003c80 <UART_SetConfig+0x1c0>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <UART_SetConfig+0x1a8>
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d006      	beq.n	8003c74 <UART_SetConfig+0x1b4>
 8003c66:	e00b      	b.n	8003c80 <UART_SetConfig+0x1c0>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e0cc      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e0c9      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c74:	2304      	movs	r3, #4
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0c6      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e0c3      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0c0      	b.n	8003e08 <UART_SetConfig+0x348>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a44      	ldr	r2, [pc, #272]	; (8003d9c <UART_SetConfig+0x2dc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d125      	bne.n	8003cdc <UART_SetConfig+0x21c>
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9e:	d017      	beq.n	8003cd0 <UART_SetConfig+0x210>
 8003ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca4:	d817      	bhi.n	8003cd6 <UART_SetConfig+0x216>
 8003ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003caa:	d00b      	beq.n	8003cc4 <UART_SetConfig+0x204>
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb0:	d811      	bhi.n	8003cd6 <UART_SetConfig+0x216>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <UART_SetConfig+0x1fe>
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cba:	d006      	beq.n	8003cca <UART_SetConfig+0x20a>
 8003cbc:	e00b      	b.n	8003cd6 <UART_SetConfig+0x216>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e0a1      	b.n	8003e08 <UART_SetConfig+0x348>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e09e      	b.n	8003e08 <UART_SetConfig+0x348>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e09b      	b.n	8003e08 <UART_SetConfig+0x348>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e098      	b.n	8003e08 <UART_SetConfig+0x348>
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e095      	b.n	8003e08 <UART_SetConfig+0x348>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <UART_SetConfig+0x2e0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d125      	bne.n	8003d32 <UART_SetConfig+0x272>
 8003ce6:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cf4:	d017      	beq.n	8003d26 <UART_SetConfig+0x266>
 8003cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cfa:	d817      	bhi.n	8003d2c <UART_SetConfig+0x26c>
 8003cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d00:	d00b      	beq.n	8003d1a <UART_SetConfig+0x25a>
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d06:	d811      	bhi.n	8003d2c <UART_SetConfig+0x26c>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <UART_SetConfig+0x254>
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d10:	d006      	beq.n	8003d20 <UART_SetConfig+0x260>
 8003d12:	e00b      	b.n	8003d2c <UART_SetConfig+0x26c>
 8003d14:	2301      	movs	r3, #1
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e076      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e073      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d20:	2304      	movs	r3, #4
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e070      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d26:	2308      	movs	r3, #8
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e06d      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e06a      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <UART_SetConfig+0x2e4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d138      	bne.n	8003dae <UART_SetConfig+0x2ee>
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d4a:	d017      	beq.n	8003d7c <UART_SetConfig+0x2bc>
 8003d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d50:	d82a      	bhi.n	8003da8 <UART_SetConfig+0x2e8>
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d56:	d00b      	beq.n	8003d70 <UART_SetConfig+0x2b0>
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5c:	d824      	bhi.n	8003da8 <UART_SetConfig+0x2e8>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <UART_SetConfig+0x2aa>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d006      	beq.n	8003d76 <UART_SetConfig+0x2b6>
 8003d68:	e01e      	b.n	8003da8 <UART_SetConfig+0x2e8>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e04b      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d70:	2302      	movs	r3, #2
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e048      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d76:	2304      	movs	r3, #4
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e045      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e042      	b.n	8003e08 <UART_SetConfig+0x348>
 8003d82:	bf00      	nop
 8003d84:	efff69f3 	.word	0xefff69f3
 8003d88:	40011000 	.word	0x40011000
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40004400 	.word	0x40004400
 8003d94:	40004800 	.word	0x40004800
 8003d98:	40004c00 	.word	0x40004c00
 8003d9c:	40005000 	.word	0x40005000
 8003da0:	40011400 	.word	0x40011400
 8003da4:	40007800 	.word	0x40007800
 8003da8:	2310      	movs	r3, #16
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e02c      	b.n	8003e08 <UART_SetConfig+0x348>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <UART_SetConfig+0x4bc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d125      	bne.n	8003e04 <UART_SetConfig+0x344>
 8003db8:	4b71      	ldr	r3, [pc, #452]	; (8003f80 <UART_SetConfig+0x4c0>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dc6:	d017      	beq.n	8003df8 <UART_SetConfig+0x338>
 8003dc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dcc:	d817      	bhi.n	8003dfe <UART_SetConfig+0x33e>
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d00b      	beq.n	8003dec <UART_SetConfig+0x32c>
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	d811      	bhi.n	8003dfe <UART_SetConfig+0x33e>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <UART_SetConfig+0x326>
 8003dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de2:	d006      	beq.n	8003df2 <UART_SetConfig+0x332>
 8003de4:	e00b      	b.n	8003dfe <UART_SetConfig+0x33e>
 8003de6:	2300      	movs	r3, #0
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e00d      	b.n	8003e08 <UART_SetConfig+0x348>
 8003dec:	2302      	movs	r3, #2
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e00a      	b.n	8003e08 <UART_SetConfig+0x348>
 8003df2:	2304      	movs	r3, #4
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e007      	b.n	8003e08 <UART_SetConfig+0x348>
 8003df8:	2308      	movs	r3, #8
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e004      	b.n	8003e08 <UART_SetConfig+0x348>
 8003dfe:	2310      	movs	r3, #16
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e001      	b.n	8003e08 <UART_SetConfig+0x348>
 8003e04:	2310      	movs	r3, #16
 8003e06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e10:	d15b      	bne.n	8003eca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e12:	7ffb      	ldrb	r3, [r7, #31]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d828      	bhi.n	8003e6a <UART_SetConfig+0x3aa>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x360>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e6b 	.word	0x08003e6b
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e6b 	.word	0x08003e6b
 8003e38:	08003e6b 	.word	0x08003e6b
 8003e3c:	08003e6b 	.word	0x08003e6b
 8003e40:	08003e63 	.word	0x08003e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe fdbe 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8003e48:	61b8      	str	r0, [r7, #24]
        break;
 8003e4a:	e013      	b.n	8003e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7fe fdce 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 8003e50:	61b8      	str	r0, [r7, #24]
        break;
 8003e52:	e00f      	b.n	8003e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <UART_SetConfig+0x4c4>)
 8003e56:	61bb      	str	r3, [r7, #24]
        break;
 8003e58:	e00c      	b.n	8003e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5a:	f7fe fca1 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8003e5e:	61b8      	str	r0, [r7, #24]
        break;
 8003e60:	e008      	b.n	8003e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	61bb      	str	r3, [r7, #24]
        break;
 8003e68:	e004      	b.n	8003e74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	77bb      	strb	r3, [r7, #30]
        break;
 8003e72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d074      	beq.n	8003f64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	005a      	lsls	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d916      	bls.n	8003ec4 <UART_SetConfig+0x404>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d212      	bcs.n	8003ec4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f023 030f 	bic.w	r3, r3, #15
 8003ea6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	89fa      	ldrh	r2, [r7, #14]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	e04f      	b.n	8003f64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	77bb      	strb	r3, [r7, #30]
 8003ec8:	e04c      	b.n	8003f64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d828      	bhi.n	8003f22 <UART_SetConfig+0x462>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x418>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f23 	.word	0x08003f23
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f23 	.word	0x08003f23
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fd62 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8003f00:	61b8      	str	r0, [r7, #24]
        break;
 8003f02:	e013      	b.n	8003f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fd72 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 8003f08:	61b8      	str	r0, [r7, #24]
        break;
 8003f0a:	e00f      	b.n	8003f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <UART_SetConfig+0x4c4>)
 8003f0e:	61bb      	str	r3, [r7, #24]
        break;
 8003f10:	e00c      	b.n	8003f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fc45 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8003f16:	61b8      	str	r0, [r7, #24]
        break;
 8003f18:	e008      	b.n	8003f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e004      	b.n	8003f2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77bb      	strb	r3, [r7, #30]
        break;
 8003f2a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085a      	lsrs	r2, r3, #1
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d909      	bls.n	8003f60 <UART_SetConfig+0x4a0>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d205      	bcs.n	8003f60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	e001      	b.n	8003f64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f70:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40007c00 	.word	0x40007c00
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400

08003f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01a      	beq.n	800409e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004086:	d10a      	bne.n	800409e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b098      	sub	sp, #96	; 0x60
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040dc:	f7fc ff44 	bl	8000f68 <HAL_GetTick>
 80040e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d12e      	bne.n	800414e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f88c 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d021      	beq.n	800414e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411e:	653b      	str	r3, [r7, #80]	; 0x50
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004128:	647b      	str	r3, [r7, #68]	; 0x44
 800412a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800412e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e062      	b.n	8004214 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d149      	bne.n	80041f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004164:	2200      	movs	r2, #0
 8004166:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f856 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d03c      	beq.n	80041f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	623b      	str	r3, [r7, #32]
   return(result);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
 8004196:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800419a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	69b9      	ldr	r1, [r7, #24]
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	617b      	str	r3, [r7, #20]
   return(result);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e011      	b.n	8004214 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3758      	adds	r7, #88	; 0x58
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422c:	e04f      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d04b      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fc fe97 	bl	8000f68 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <UART_WaitOnFlagUntilTimeout+0x30>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e04e      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d037      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b80      	cmp	r3, #128	; 0x80
 8004262:	d034      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d031      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d110      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2208      	movs	r2, #8
 800427e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f8ff 	bl	8004484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2208      	movs	r2, #8
 800428a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e029      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a8:	d111      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f8e5 	bl	8004484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00f      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d0a0      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b097      	sub	sp, #92	; 0x5c
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d10e      	bne.n	800434a <UART_Start_Receive_IT+0x52>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <UART_Start_Receive_IT+0x48>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f240 12ff 	movw	r2, #511	; 0x1ff
 800433a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800433e:	e02d      	b.n	800439c <UART_Start_Receive_IT+0xa4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	22ff      	movs	r2, #255	; 0xff
 8004344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004348:	e028      	b.n	800439c <UART_Start_Receive_IT+0xa4>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10d      	bne.n	800436e <UART_Start_Receive_IT+0x76>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <UART_Start_Receive_IT+0x6c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004362:	e01b      	b.n	800439c <UART_Start_Receive_IT+0xa4>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	227f      	movs	r2, #127	; 0x7f
 8004368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800436c:	e016      	b.n	800439c <UART_Start_Receive_IT+0xa4>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004376:	d10d      	bne.n	8004394 <UART_Start_Receive_IT+0x9c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d104      	bne.n	800438a <UART_Start_Receive_IT+0x92>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	227f      	movs	r2, #127	; 0x7f
 8004384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004388:	e008      	b.n	800439c <UART_Start_Receive_IT+0xa4>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	223f      	movs	r2, #63	; 0x3f
 800438e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004392:	e003      	b.n	800439c <UART_Start_Receive_IT+0xa4>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2222      	movs	r2, #34	; 0x22
 80043a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	657b      	str	r3, [r7, #84]	; 0x54
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e8:	d107      	bne.n	80043fa <UART_Start_Receive_IT+0x102>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a21      	ldr	r2, [pc, #132]	; (800447c <UART_Start_Receive_IT+0x184>)
 80043f6:	669a      	str	r2, [r3, #104]	; 0x68
 80043f8:	e002      	b.n	8004400 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a20      	ldr	r2, [pc, #128]	; (8004480 <UART_Start_Receive_IT+0x188>)
 80043fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d019      	beq.n	800443c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800441c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
 8004428:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e6      	bne.n	8004408 <UART_Start_Receive_IT+0x110>
 800443a:	e018      	b.n	800446e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f043 0320 	orr.w	r3, r3, #32
 8004450:	653b      	str	r3, [r7, #80]	; 0x50
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445a:	623b      	str	r3, [r7, #32]
 800445c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	69f9      	ldr	r1, [r7, #28]
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	61bb      	str	r3, [r7, #24]
   return(result);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e6      	bne.n	800443c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	375c      	adds	r7, #92	; 0x5c
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	08004775 	.word	0x08004775
 8004480:	080045cd 	.word	0x080045cd

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b095      	sub	sp, #84	; 0x54
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	643b      	str	r3, [r7, #64]	; 0x40
 80044ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e6      	bne.n	800448c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3308      	adds	r3, #8
 80044dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e5      	bne.n	80044be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d118      	bne.n	800452c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60bb      	str	r3, [r7, #8]
   return(result);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	613b      	str	r3, [r7, #16]
   return(result);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004540:	bf00      	nop
 8004542:	3754      	adds	r7, #84	; 0x54
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff fa88 	bl	8003a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	60bb      	str	r3, [r7, #8]
   return(result);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	613b      	str	r3, [r7, #16]
   return(result);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fa54 	bl	8003a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b09c      	sub	sp, #112	; 0x70
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e4:	2b22      	cmp	r3, #34	; 0x22
 80045e6:	f040 80b9 	bne.w	800475c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045f8:	b2d9      	uxtb	r1, r3
 80045fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	400a      	ands	r2, r1
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 809c 	bne.w	800476c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004648:	66bb      	str	r3, [r7, #104]	; 0x68
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004652:	65bb      	str	r3, [r7, #88]	; 0x58
 8004654:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e6      	bne.n	8004634 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	667b      	str	r3, [r7, #100]	; 0x64
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3308      	adds	r3, #8
 8004684:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004686:	647a      	str	r2, [r7, #68]	; 0x44
 8004688:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800468c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d018      	beq.n	80046ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	623b      	str	r3, [r7, #32]
   return(result);
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046d0:	663b      	str	r3, [r7, #96]	; 0x60
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
 80046dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e6      	bne.n	80046bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d12e      	bne.n	8004754 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60fb      	str	r3, [r7, #12]
   return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	617b      	str	r3, [r7, #20]
   return(result);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e6      	bne.n	80046fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b10      	cmp	r3, #16
 800473a:	d103      	bne.n	8004744 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2210      	movs	r2, #16
 8004742:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff f9a1 	bl	8003a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004752:	e00b      	b.n	800476c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fc f955 	bl	8000a04 <HAL_UART_RxCpltCallback>
}
 800475a:	e007      	b.n	800476c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	619a      	str	r2, [r3, #24]
}
 800476c:	bf00      	nop
 800476e:	3770      	adds	r7, #112	; 0x70
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b09c      	sub	sp, #112	; 0x70
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004782:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478c:	2b22      	cmp	r3, #34	; 0x22
 800478e:	f040 80b9 	bne.w	8004904 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80047a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80047a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80047aa:	4013      	ands	r3, r2
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 809c 	bne.w	8004914 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80047ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f0:	667b      	str	r3, [r7, #100]	; 0x64
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fa:	657b      	str	r3, [r7, #84]	; 0x54
 80047fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800482e:	643a      	str	r2, [r7, #64]	; 0x40
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d018      	beq.n	8004896 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	61fb      	str	r3, [r7, #28]
   return(result);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004884:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e6      	bne.n	8004864 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	2b01      	cmp	r3, #1
 800489c:	d12e      	bne.n	80048fc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	613b      	str	r3, [r7, #16]
   return(result);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d103      	bne.n	80048ec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2210      	movs	r2, #16
 80048ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff f8cd 	bl	8003a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048fa:	e00b      	b.n	8004914 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fc f881 	bl	8000a04 <HAL_UART_RxCpltCallback>
}
 8004902:	e007      	b.n	8004914 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	619a      	str	r2, [r3, #24]
}
 8004914:	bf00      	nop
 8004916:	3770      	adds	r7, #112	; 0x70
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800491c:	b084      	sub	sp, #16
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	f107 001c 	add.w	r0, r7, #28
 800492a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800492e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004932:	2b01      	cmp	r3, #1
 8004934:	d121      	bne.n	800497a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	4b21      	ldr	r3, [pc, #132]	; (80049cc <USB_CoreInit+0xb0>)
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800495a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa92 	bl	8004e98 <USB_CoreReset>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e010      	b.n	800499c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa86 	bl	8004e98 <USB_CoreReset>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800499c:	7fbb      	ldrb	r3, [r7, #30]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d10b      	bne.n	80049ba <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f043 0206 	orr.w	r2, r3, #6
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c6:	b004      	add	sp, #16
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	ffbdffbf 	.word	0xffbdffbf

080049d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f023 0201 	bic.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d115      	bne.n	8004a40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a20:	200a      	movs	r0, #10
 8004a22:	f7fc faad 	bl	8000f80 <HAL_Delay>
      ms += 10U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	330a      	adds	r3, #10
 8004a2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fa25 	bl	8004e7c <USB_GetMode>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d01e      	beq.n	8004a76 <USB_SetCurrentMode+0x84>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2bc7      	cmp	r3, #199	; 0xc7
 8004a3c:	d9f0      	bls.n	8004a20 <USB_SetCurrentMode+0x2e>
 8004a3e:	e01a      	b.n	8004a76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d115      	bne.n	8004a72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a52:	200a      	movs	r0, #10
 8004a54:	f7fc fa94 	bl	8000f80 <HAL_Delay>
      ms += 10U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	330a      	adds	r3, #10
 8004a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa0c 	bl	8004e7c <USB_GetMode>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <USB_SetCurrentMode+0x84>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2bc7      	cmp	r3, #199	; 0xc7
 8004a6e:	d9f0      	bls.n	8004a52 <USB_SetCurrentMode+0x60>
 8004a70:	e001      	b.n	8004a76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e005      	b.n	8004a82 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2bc8      	cmp	r3, #200	; 0xc8
 8004a7a:	d101      	bne.n	8004a80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e009      	b.n	8004ac0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	3340      	adds	r3, #64	; 0x40
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3301      	adds	r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b0e      	cmp	r3, #14
 8004ac4:	d9f2      	bls.n	8004aac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ac6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d11c      	bne.n	8004b08 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e005      	b.n	8004b14 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d10d      	bne.n	8004b44 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b30:	2100      	movs	r1, #0
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f968 	bl	8004e08 <USB_SetDevSpeed>
 8004b38:	e008      	b.n	8004b4c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f963 	bl	8004e08 <USB_SetDevSpeed>
 8004b42:	e003      	b.n	8004b4c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b44:	2103      	movs	r1, #3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f95e 	bl	8004e08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b4c:	2110      	movs	r1, #16
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f8fa 	bl	8004d48 <USB_FlushTxFifo>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f924 	bl	8004dac <USB_FlushRxFifo>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	461a      	mov	r2, r3
 8004b82:	2300      	movs	r3, #0
 8004b84:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e043      	b.n	8004c20 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bae:	d118      	bne.n	8004be2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e013      	b.n	8004bf4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e008      	b.n	8004bf4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	461a      	mov	r2, r3
 8004c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c24:	461a      	mov	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d3b5      	bcc.n	8004b98 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	e043      	b.n	8004cba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c48:	d118      	bne.n	8004c7c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e013      	b.n	8004c8e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	461a      	mov	r2, r3
 8004c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e008      	b.n	8004c8e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cac:	461a      	mov	r2, r3
 8004cae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d3b5      	bcc.n	8004c32 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ce6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f043 0210 	orr.w	r2, r3, #16
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <USB_DevInit+0x2b4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f043 0208 	orr.w	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d105      	bne.n	8004d30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <USB_DevInit+0x2b8>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3c:	b004      	add	sp, #16
 8004d3e:	4770      	bx	lr
 8004d40:	803c3800 	.word	0x803c3800
 8004d44:	40000004 	.word	0x40000004

08004d48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d62:	d901      	bls.n	8004d68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e01b      	b.n	8004da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	daf2      	bge.n	8004d56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	019b      	lsls	r3, r3, #6
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d8c:	d901      	bls.n	8004d92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e006      	b.n	8004da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d0f0      	beq.n	8004d80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004dc4:	d901      	bls.n	8004dca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e018      	b.n	8004dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	daf2      	bge.n	8004db8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2210      	movs	r2, #16
 8004dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004de8:	d901      	bls.n	8004dee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e006      	b.n	8004dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d0f0      	beq.n	8004ddc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e54:	f023 0303 	bic.w	r3, r3, #3
 8004e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f003 0301 	and.w	r3, r3, #1
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004eb0:	d901      	bls.n	8004eb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e01b      	b.n	8004eee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	daf2      	bge.n	8004ea4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f043 0201 	orr.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004eda:	d901      	bls.n	8004ee0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e006      	b.n	8004eee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d0f0      	beq.n	8004ece <USB_CoreReset+0x36>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <__libc_init_array>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	4d0d      	ldr	r5, [pc, #52]	; (8004f34 <__libc_init_array+0x38>)
 8004f00:	4c0d      	ldr	r4, [pc, #52]	; (8004f38 <__libc_init_array+0x3c>)
 8004f02:	1b64      	subs	r4, r4, r5
 8004f04:	10a4      	asrs	r4, r4, #2
 8004f06:	2600      	movs	r6, #0
 8004f08:	42a6      	cmp	r6, r4
 8004f0a:	d109      	bne.n	8004f20 <__libc_init_array+0x24>
 8004f0c:	4d0b      	ldr	r5, [pc, #44]	; (8004f3c <__libc_init_array+0x40>)
 8004f0e:	4c0c      	ldr	r4, [pc, #48]	; (8004f40 <__libc_init_array+0x44>)
 8004f10:	f000 f820 	bl	8004f54 <_init>
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	2600      	movs	r6, #0
 8004f1a:	42a6      	cmp	r6, r4
 8004f1c:	d105      	bne.n	8004f2a <__libc_init_array+0x2e>
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f24:	4798      	blx	r3
 8004f26:	3601      	adds	r6, #1
 8004f28:	e7ee      	b.n	8004f08 <__libc_init_array+0xc>
 8004f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2e:	4798      	blx	r3
 8004f30:	3601      	adds	r6, #1
 8004f32:	e7f2      	b.n	8004f1a <__libc_init_array+0x1e>
 8004f34:	08004f8c 	.word	0x08004f8c
 8004f38:	08004f8c 	.word	0x08004f8c
 8004f3c:	08004f8c 	.word	0x08004f8c
 8004f40:	08004f90 	.word	0x08004f90

08004f44 <memset>:
 8004f44:	4402      	add	r2, r0
 8004f46:	4603      	mov	r3, r0
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d100      	bne.n	8004f4e <memset+0xa>
 8004f4c:	4770      	bx	lr
 8004f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f52:	e7f9      	b.n	8004f48 <memset+0x4>

08004f54 <_init>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr

08004f60 <_fini>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr
